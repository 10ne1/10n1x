From 717ace784c95ccc392f200fc545398f1bd6db919 Mon Sep 17 00:00:00 2001
From: Ioan-Adrian Ratiu <adi@adirat.com>
Date: Sun, 22 Jul 2018 01:49:31 +0300
Subject: [PATCH] configure: enable cross-compilation

Upstream-Status: Not applicable [OpenEmbedded-specific]

Signed-off-by: Ioan-Adrian Ratiu <adi@adirat.com>
---
 configure | 132 +++++-------------------------------------------------
 1 file changed, 10 insertions(+), 122 deletions(-)

diff --git a/configure b/configure
index ab7e1610..e42ad727 100755
--- a/configure
+++ b/configure
@@ -282,7 +282,7 @@ for option; do
 	echo "See:"
 	echo "	$0 --help"
 	echo ""
-	exit 1
+#	exit 1
     fi
 done
 
@@ -318,71 +318,14 @@ dependencies are available:
 EOF
 
 errors=0
-printf "int main(void){return 0;}\n" > minimal.c
-
-printf "Sanity checking C compilation environment... "
-test_cmdline="${CC} ${CFLAGS} ${CPPFLAGS} minimal.c ${LDFLAGS} -o minimal"
-if  ${test_cmdline} > /dev/null 2>&1
-then
-    printf "OK.\n"
-else
-    printf "Fail.\n"
-    errors=$((errors + 1))
-    printf Executed:; printf ' %s' ${test_cmdline}; echo
-    ${test_cmdline}
-fi
-
-printf "Sanity checking C++ compilation environment... "
-test_cmdline="${CXX} ${CXXFLAGS_for_sh} ${CPPFLAGS} minimal.c ${LDFLAGS} -o minimal"
-if ${test_cmdline} > /dev/null 2>&1
-then
-    printf "OK.\n"
-else
-    printf "Fail.\n"
-    errors=$((errors + 1))
-    printf Executed:; printf ' %s' ${test_cmdline}; echo
-    ${test_cmdline}
-fi
-unset test_cmdline
-
-if [ $errors -gt 0 ]; then
-    cat <<EOF
-*** Error: Initial sanity checking of environment failed.  Please try
-running configure in a clean environment, and if the problem persists,
-report a bug.
-EOF
-    rm -f minimal minimal.c
-    exit 1
-fi
 
 printf "Reading libnotmuch version from source... "
-cat > _libversion.c <<EOF
-#include <stdio.h>
-#include "lib/notmuch.h"
-int main(void) {
-    printf("libnotmuch_version_major=%d\n",
-		LIBNOTMUCH_MAJOR_VERSION);
-    printf("libnotmuch_version_minor=%d\n",
-		LIBNOTMUCH_MINOR_VERSION);
-    printf("libnotmuch_version_release=%d\n",
-		LIBNOTMUCH_MICRO_VERSION);
-    return 0;
-}
-EOF
-if ${CC} ${CFLAGS} -I"$srcdir" _libversion.c -o _libversion > /dev/null 2>&1 \
-       && ./_libversion > _libversion.sh && . ./_libversion.sh
-then
-    printf "OK.\n"
-else
-    cat <<EOF
 
-*** Error: Reading lib/notmuch.h failed.
-Please try running configure again in a clean environment, and if the
-problem persists, report a bug.
-EOF
-    rm -f _libversion _libversion.c _libversion.sh
-    exit 1
-fi
+libnotmuch_version_major=$(cat lib/notmuch.h | grep -m1 LIBNOTMUCH_MAJOR_VERSION | awk '{print $3}')
+libnotmuch_version_minor=$(cat lib/notmuch.h | grep -m1 LIBNOTMUCH_MINOR_VERSION | awk '{print $3}')
+libnotmuch_version_release=$(cat lib/notmuch.h | grep -m1 LIBNOTMUCH_MICRO_VERSION | awk '{print $3}')
+
+echo $libnotmuch_version_major.$libnotmuch_version_minor.$libnotmuch_version_release
 
 if pkg-config --version > /dev/null 2>&1; then
     have_pkg_config=1
@@ -410,72 +353,17 @@ fi
 have_xapian_compact=0
 have_xapian_field_processor=0
 if [ ${have_xapian} = "1" ]; then
-    printf "Checking for Xapian compaction support... "
-    cat>_compact.cc<<EOF
-#include <xapian.h>
-class TestCompactor : public Xapian::Compactor { };
-EOF
-    if ${CXX} ${CXXFLAGS_for_sh} ${xapian_cxxflags} -c _compact.cc -o _compact.o > /dev/null 2>&1
-    then
-	have_xapian_compact=1
-	printf "Yes.\n"
-    else
-	printf "No.\n"
-	errors=$((errors + 1))
-    fi
-
-    rm -f _compact.o _compact.cc
-
-    printf "Checking for Xapian FieldProcessor API... "
-    cat>_field_processor.cc<<EOF
-#include <xapian.h>
-class TitleFieldProcessor : public Xapian::FieldProcessor { };
-EOF
-    if ${CXX} ${CXXFLAGS_for_sh} ${xapian_cxxflags} -c _field_processor.cc -o _field_processor.o > /dev/null 2>&1
-    then
-	have_xapian_field_processor=1
-	printf "Yes.\n"
-    else
-	printf "No. (optional)\n"
-    fi
-
-    rm -f _field_processor.o _field_processor.cc
+    have_xapian_compact=1
+    have_xapian_field_processor=1
 
     default_xapian_backend=""
     # DB_RETRY_LOCK is only supported on Xapian > 1.3.2
     have_xapian_db_retry_lock=0
     if [ $WITH_RETRY_LOCK = "1" ]; then
-	printf "Checking for Xapian lock retry support... "
-	cat>_retry.cc<<EOF
-#include <xapian.h>
-int flag = Xapian::DB_RETRY_LOCK;
-EOF
-	if ${CXX} ${CXXFLAGS_for_sh} ${xapian_cxxflags} -c _retry.cc -o _retry.o > /dev/null 2>&1
-	then
-	    have_xapian_db_retry_lock=1
-	    printf "Yes.\n"
-	else
-	    printf "No. (optional)\n"
-	fi
-	rm -f _retry.o _retry.cc
+	have_xapian_db_retry_lock=1
     fi
 
-    printf "Testing default Xapian backend... "
-    cat >_default_backend.cc <<EOF
-#include <xapian.h>
-int main(int argc, char** argv) {
-   Xapian::WritableDatabase db("test.db",Xapian::DB_CREATE_OR_OPEN);
-}
-EOF
-    ${CXX} ${CXXFLAGS_for_sh} ${xapian_cxxflags} _default_backend.cc -o _default_backend ${xapian_ldflags}
-    ./_default_backend
-    if [ -f test.db/iamglass ]; then
-	default_xapian_backend=glass
-    else
-	default_xapian_backend=chert
-    fi
-    printf "%s\n" "${default_xapian_backend}";
-    rm -rf test.db _default_backend _default_backend.cc
+    default_xapian_backend=glass
 fi
 
 # we need to have a version >= 2.6.5 to avoid a crypto bug. We need
-- 
2.18.0

